/* Tip: Use <jenkins-url>/pipeline-syntax to help write new command snippets */
pipeline {
	agent any

	options {
		checkoutToSubdirectory('repo')
	}

	environment {
		SRC_DIR = "${WORKSPACE}/repo"
		STORAGE_DIR = "${WORKSPACE}/storage"
		REPO_DIR = "${JENKINS_HOME}/repos"
		OPENTHREAD_REPO = "${REPO_DIR}/openthread.git"
		IOTIVITY_REPO = "${REPO_DIR}/ca-iotivity-lite.git"
	}

	stages {
		/** Git mirror stage
		 *  Mirror the openthread repo, to speed up CI.
		 */
		stage('Mirror') {
			steps {
				/** Mirror the openthread repo. All locked so we don't get multiple-access errors*/
				lock('openthread-mirror') {
					script {
						/** Make the jenkins/repos folder if it doesn't exist */
						if (!fileExists("${REPO_DIR}"))
						{
							sh(
								label: 'make repo dir',
								script: 'mkdir "${REPO_DIR}"'
							)
						}

						/** Clone the openthread repo as a mirror if it exists, otherwise just fetch it */
						if (fileExists("${OPENTHREAD_REPO}")) {
							sh(
								label: 'fetch openthread',
								script: 'git -C "${OPENTHREAD_REPO}" fetch --all --prune'
							)
						}
						else {
							sh(
								label: 'clone openthread',
								script: 'git -C "${REPO_DIR}" clone --mirror https://github.com/Cascoda/openthread.git '
							)
						}

						/** Clone the iotivity repo as a mirror if it exists, otherwise just fetch it */
						if (fileExists("${IOTIVITY_REPO}")) {
							sh(
								label: 'fetch iotivity',
								script: 'git -C "${IOTIVITY_REPO}" fetch --all --prune'
							)
						}
						else {
							sh(
								label: 'clone iotivity',
								script: 'git -C "${REPO_DIR}" clone --mirror https://github.com/Cascoda/iotivity-lite.git ca-iotivity-lite.git'
							)
						}
					}
				}
			}
		}

		stage('Precheck') {
			environment {
				//Reuse the build-posix build directory as we are running a native build
				BUILD_DIR = 'build-posix'
			}
			steps {
				// Allow build to continue even if the precheck fails
				catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
					/* Verify that the committed code is formatted */
					cmake_build_helper(
						cleanBuild: true,
						steps: [[args: 'format']]
					)
					dir("${env.SRC_DIR}") {
						sh(
							script: 'git diff --exit-code',
							label: 'Verify code is correctly formatted'
						)
					}

					/* Shell static analysis */
				}
			}
		}

		/** Build Stage
		 *  Compile for all major platforms in various configurations & run unit tests
		 */
		stage('Build') {
			parallel {
				stage('Chili2') {
					environment {
					    BUILD_DIR = 'build-chili2'
					}
					steps {
						/* Build for CA8210 */
						cmake_build_helper(
							cleanBuild: true,
							cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_m2351.cmake -DCASCODA_CA_VER=8210'
						)

						/* Build for CA8211*/
						cmake_build_helper(cmakeArgs: '-DCASCODA_CA_VER=8211 -DCASCODA_EXTERNAL_FLASHCHIP_PRESENT=ON')

						/* Collect binary size information for graphing using 'plot' calls in PostBuild stage*/
						dir("build-chili2")
						{
							sh 'mkdir -p ${STORAGE_DIR}'
							sh 'cp ./bin/mac-dongle.bin ${STORAGE_DIR}'
							sh '${SRC_DIR}/etc/make_size_csvs.sh "mac-dongle" "ot-cli" "ot-sed-thermometer"'
						}

						/* Build with TrustZone*/
						cmake_build_helper(cmakeArgs: '-DCASCODA_CA_VER=8211 -DCASCODA_CHILI2_TRUSTZONE=ON -DCASCODA_EXTERNAL_FLASHCHIP_PRESENT=OFF')

						/* Build with UART instead of USB */
						cmake_build_helper(cmakeArgs: '-DCASCODA_BM_INTERFACE=UART -DCASCODA_CHILI2_TRUSTZONE=OFF')

						/* Build with no comms interface */
						cmake_build_helper(cmakeArgs: '-DCASCODA_BM_INTERFACE=NONE')
					}
				}

				stage('Chili') {
					environment {
						BUILD_DIR = 'build-chili'
					}
					steps {
						/* Build for CA8210 */
						cmake_build_helper(
							cleanBuild: true,
							cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_nano120.cmake -DCASCODA_CA_VER=8210'
						)

						/* Build for CA8211 */
						cmake_build_helper(cmakeArgs: '-DCASCODA_CA_VER=8211')
					}
				}

				stage('Posix') {
					environment {
						BUILD_DIR = 'build-posix'
					}
					steps {
						/* Build and test for CA8210 */
						cmake_build_helper(
							cmakeArgs: '-DCASCODA_CA_VER=8210 -DCASCODA_BUILD_DUMMY=OFF -DCASCODA_USE_CLANG_TIDY=ON -DCASCODA_MAC_BLACKLIST=10'
						)
						ctest_helper()

						/* Follow up with dummy baremetal for further tests */
						cmake_build_helper(cmakeArgs: '-DCASCODA_BUILD_DUMMY=ON')
						ctest_helper()

						/* Build for CA8211 */
						cmake_build_helper(cmakeArgs: '-DCASCODA_CA_VER=8211 -DCASCODA_LOG_LEVEL=DEBG')
						ctest_helper()

						/* Follow up with dummy off for further tests */
						cmake_build_helper(cmakeArgs: '-DCASCODA_BUILD_DUMMY=OFF')
						ctest_helper()
						
						/* Build docs */
						cmake_build_helper(
							cmakeArgs: '-DCASCODA_PLANTUML_JAR=/usr/share/plantuml/plantuml.jar',
							steps: [[args: 'docs']]
						)
					}
				}

				stage('Raspberry Pi') {
					environment {
						BUILD_DIR = 'build-raspberrypi'
					}
					steps {
						/* Build for CA8211 */
						cmake_build_helper(
							cleanBuild: true,
							cmakeArgs: '-DCASCODA_CA_VER=8211 -DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_raspberrypi.cmake'
						)
					}
				}

				stage('Chili2 Ninja') {
					environment {
						BUILD_DIR = 'build-ninja-chili2'
					}
					steps {
						/* Test the Ninja build for Chili2 CA8211 */
						cmake_build_helper(
							cleanBuild: true,
							cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_m2351.cmake -GNinja',
							steps: [[args: '']]
						)

						/* Build with secure LWM2M enabled */
						cmake_build_helper(
							cmakeArgs: '-DCASCODA_BM_INTERFACE=USB -DCASCODA_BUILD_SECURE_LWM2M=ON -DCASCODA_LOG_LEVEL=CRIT',
							steps: [[args: '']]
						)

						/* Build with Iotivity enabled */
						cmake_build_helper(
							cmakeArgs: '-DCASCODA_BM_INTERFACE=USB -DCASCODA_BUILD_OCF=ON -DCASCODA_BUILD_OCF_PKI=ON -DCASCODA_BUILD_SECURE_LWM2M=OFF',
							steps: [[args: '']]
						)
					}
				}
			}
		}

		/**
		 * Run the longer-running tests on posix, but only on master branch.
		 */
		stage('Long Tests') {
			when {
				branch(
					pattern: "master",
					comparator: "REGEXP"
				)
			}
			environment {
				BUILD_DIR = 'build-posix'
			}
			steps {
				lock('long-test-lock') {
					cmake_build_helper(
						cmakeArgs: " -DCASCODA_CHILICTL_TEST_SERIALNO=E5F3704A4A4D5391 -DCASCODA_CHILICTL_TEST_BINPATH=${STORAGE_DIR}/mac-dongle.bin",
						steps: [[args: 'longtest']]
					)
				}
			}
		}


		/** PostBuild Stage
		 *  Process the generated artifacts.
		 */
		stage('PostBuild') {
			steps {
				/* Read the logs for GCC Issues & publish to tool*/
				/* Break if any new errors are introduced.*/
				recordIssues(
					qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]],
					tools: [gcc()]
				)

				/* Read the logs for doxygen Issues & publish to tool*/
				/* Break if any new errors are introduced.*/
				recordIssues(
					qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]],
					tools: [doxygen(pattern: '**/doxyerr.txt')],
					filters: [excludeMessage(pattern:'Included by graph for .* not generated, too many nodes')]
				)

				plottarget('all')
				plottarget('mac-dongle')
				plottarget('ot-cli')
				plottarget('ot-sed-thermometer')

				/* Publish the html docs to jenkins */
				publishHTML(
					target: [
						reportName: "Doxygen",
						reportDir: "build-posix/docs/docs/html",
						reportFiles: "index.html",
						keepAll: false,
						alwaysLinkToLastBuild: false,
						allowMissing: false
					]
				)
			}
		}
	}
}

/* Below here are a collection of helper functions for using in the pipeline above */

/** Helper function to run a cmake config + build with common arguments.
 *
 * @param cmakeArgs  - The argument string to pass to CMake. This will be supplemented by certain required additionals.
 * @param cleanBuild - Default false. Set to true to run make clean before make.
 * @param steps      - Default '-j10 -O'. The arguments to pass to the build tool (e.g. 'make')
 */
def cmake_build_helper(Map args) {
	def defaultargs = [cmakeArgs: '', cleanBuild: false, steps: [[args: '-j10 -O']]]
	def cmakeRepoArgs = "-DCASCODA_OPENTHREAD_REPO=\"${env.OPENTHREAD_REPO}\" -DCASCODA_IOTIVITY_REPO=\"${env.IOTIVITY_REPO}\""
	def cmakeCCacheArgs = "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache"

	args = defaultargs + args
	cmakeBuild(
		cleanBuild: args.cleanBuild,
		installation: 'InSearchPath',
		buildDir: "${env.BUILD_DIR}",
		sourceDir: "${env.SRC_DIR}",
		cmakeArgs: "${args.cmakeArgs} ${cmakeRepoArgs} ${cmakeCCacheArgs}",
		steps: args.steps
	)
}

/**  Helper function to run ctest with common args
 */
def ctest_helper() {
	ctest(
		installation: 'InSearchPath',
		arguments: '--output-on-failure',
		workingDir: "${env.BUILD_DIR}",
	)
}

/** Helper function to draw flash/ram plots of the given target. The target names must also be given to the make_size_csvs.sh script.
 * 
 * @param targetname (positional) - target name, or 'all' for full graph
 */
def plottarget(targetname) {
	plot(
		csvFileName: "plot-flash-${targetname}-644cad44-96a6-4316-b928-18f65f4d9385.csv",
		csvSeries: [[displayTableFlag: false, exclusionValues: '', file: "build-chili2/flash_${targetname}.csv", inclusionFlag: 'OFF', url: '']],
		exclZero: true,
		group: 'Sizes',
		style: 'line',
		title: "Flash Usage - ${targetname}",
		yaxis: 'Flash usage (bytes)'
	)
	plot(
		csvFileName: "plot-ram-${targetname}-644cad44-96a6-4316-b928-18f65f4d9385.csv",
		csvSeries: [[displayTableFlag: false, exclusionValues: '', file: "build-chili2/ram_${targetname}.csv", inclusionFlag: 'OFF', url: '']],
		exclZero: true,
		group: 'Sizes',
		style: 'line',
		title: "RAM Usage - ${targetname}",
		yaxis: 'RAM usage (bytes)'
	)
}
