/* Tip: Use <jenkins-url>/pipeline-syntax to help write new command snippets */

pipeline {
	agent any

	environment {
	    REPO_DIR = "${JENKINS_HOME}/repos"
	    OPENTHREAD_REPO = "${REPO_DIR}/openthread.git"
	}

	stages {
		/** Git mirror stage
		 *  Mirror the openthread repo, to speed up CI.
		 */
		stage('Mirror') {
			steps {
				/** Mirror the openthread repo. All locked so we don't get multiple-access errors*/
				lock('openthread-mirror') {
					script {
						/** Make the jenkins/repos folder if it doesn't exist */
						if (!fileExists("${REPO_DIR}"))
						{
							sh(
								label: 'make repo dir',
								script: 'mkdir "${REPO_DIR}"'
							)
						}
						/** Clone the openthread repo as a mirror if it exists, otherwise just fetch it */
						if (fileExists("${OPENTHREAD_REPO}")) {
							sh(
								label: 'fetch openthread',
								script: 'git -C "${OPENTHREAD_REPO}" fetch --all --prune'
							)
						}
						else {
							sh(
								label: 'clone openthread',
								script: 'git -C "${REPO_DIR}" clone https://github.com/Cascoda/openthread.git --mirror'
							)
						}
					}
				}
			}
		}

		/** Build Stage
		 *  Compile for all major platforms in various configurations & run unit tests
		 */
		stage('Build') {
			parallel {
				stage('Chili2') {
					steps {
						/* Build for CA8210 */
						cmakeBuild(
							cleanBuild: true,
							installation: 'InSearchPath',
							buildDir: 'build-chili2',
							cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_m2351.cmake -DCASCODA_CA_VER=8210 -DCASCODA_OPENTHREAD_REPO="${OPENTHREAD_REPO}"',
							steps: [[args: '-j10 -O']]
						)

						/* Build for CA8211*/
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-chili2',
							cmakeArgs: '-DCASCODA_CA_VER=8211',
							steps: [[args: '-j10 -O']]
						)

						/* Build with UART instead of USB */
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-chili2',
							cmakeArgs: '-DCASCODA_BM_USE_USB=OFF -DCASCODA_BM_USE_UART=ON',
							steps: [[args: '-j10 -O']]
						)

						/* Build with no comms interface */
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-chili2',
							cmakeArgs: '-DCASCODA_BM_USE_USB=OFF -DCASCODA_BM_USE_UART=OFF',
							steps: [[args: '-j10 -O']]
						)
					}
				}

				stage('Chili') {
					steps {
						/* Build for CA8210 */
						cmakeBuild(
							cleanBuild: true,
							installation: 'InSearchPath',
							buildDir: 'build-chili',
							cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_nano120.cmake -DCASCODA_CA_VER=8210 -DCASCODA_OPENTHREAD_REPO="${OPENTHREAD_REPO}"',
							steps: [[args: '-j10 -O']]
						)

						/* Build for CA8211 */
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-chili',
							cmakeArgs: '-DCASCODA_CA_VER=8211',
							steps: [[args: '-j10 -O']]
						)
					}
				}

				stage('Posix') {
					steps {
						/* Build and test for CA8210 */
						cmakeBuild(
							cleanBuild: true,
							installation: 'InSearchPath',
							buildDir: 'build-posix',
							cmakeArgs: '-DCASCODA_CA_VER=8210 -DCASCODA_OPENTHREAD_REPO="${OPENTHREAD_REPO}"',
							steps: [[args: '-j10 -O']]
						)
						ctest(
							installation: 'InSearchPath',
							arguments: '--output-on-failure',
							workingDir: 'build-posix'
						)

						/* Build for CA8211 */
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-posix',
							cmakeArgs: '-DCASCODA_CA_VER=8211 -DCASCODA_LOG_LEVEL=DEBG',
							steps: [[args: '-j10 -O']]
						)
						ctest(
							installation: 'InSearchPath',
							arguments: '--output-on-failure',
							workingDir: 'build-posix'
						)

						/* Build docs */
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-posix',
							cmakeArgs: '-DCASCODA_EXCLUDE_DOXYGEN="*/build-posix/* */build-chili/* */build-chili2/* */build-raspberrypi/* */build-ninja-chili2/*"',
							steps: [[args: 'docs']]
						)
					}
				}

				stage('Raspberry Pi') {
					steps {
						/* Build for CA8211 */
						cmakeBuild(
							cleanBuild: true,
							installation: 'InSearchPath',
							buildDir: 'build-raspberrypi',
							cmakeArgs: '-DCASCODA_CA_VER=8211 -DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_raspberrypi.cmake -DCASCODA_OPENTHREAD_REPO="${OPENTHREAD_REPO}"',
							steps: [[args: '-j10 -O']]
						)
					}
				}

				stage('Chili2 Ninja') {
					steps {
						/* Test the Ninja build for Chili2 CA8211 */
						cmakeBuild(
							installation: 'InSearchPath',
							buildDir: 'build-ninja-chili2',
							cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=toolchain/arm_gcc_m2351.cmake -GNinja -DCASCODA_OPENTHREAD_REPO="${OPENTHREAD_REPO}"',
							steps: [[args: '']]
						)
					}
				}
			}
		}

		/** PostBuild Stage
		 *  Process the generated artifacts.
		 */
		stage('PostBuild') {
			steps {
				/* Read the logs for GCC Issues & publish to tool*/
				/* Break if any new errors are introduced.*/
				recordIssues(
					qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]],
					tools: [gcc()]
				)

				/* Read the logs for doxygen Issues & publish to tool*/
				/* Break if any new errors are introduced.*/
				recordIssues(
					qualityGates: [[threshold: 1, type: 'TOTAL', unstable: false]],
					tools: [doxygen(pattern: '**/doxyerr.txt')]
				)

				/* Publish the html docs to jenkins */
				publishHTML(
					target: [
						reportName: "Doxygen",
						reportDir: "build-posix/docs/docs/html",
						reportFiles: "index.html",
						keepAll: false,
						alwaysLinkToLastBuild: false,
						allowMissing: false
					]
				)
			}
		}
	}
}
