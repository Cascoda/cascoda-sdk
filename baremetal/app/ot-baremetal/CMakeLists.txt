# Global config ---------------------------------------------------------------
cmake_minimum_required (VERSION 3.11)
project (ca821x-openthread)

if (NOT CMAKE_HOST_UNIX)
	message(WARNING "Building Openthread on windows is a challenge. Contributions welcome but it's probably easier to switch to Linux.")
	message(WARNING "Skipping openthread build due to non-unix build system!")
	return()
endif()

# Main library config ---------------------------------------------------------
add_library(ca821x-openthread-bm-plat
	${PROJECT_SOURCE_DIR}/platform/alarm.c
	${PROJECT_SOURCE_DIR}/platform/entropy.c
	${PROJECT_SOURCE_DIR}/platform/flash.c
	${PROJECT_SOURCE_DIR}/platform/logging.c
	${PROJECT_SOURCE_DIR}/platform/misc.c
	${PROJECT_SOURCE_DIR}/platform/radio.c
	${PROJECT_SOURCE_DIR}/platform/serial.c
	${PROJECT_SOURCE_DIR}/platform/settings.c
	)

# platform depends on header generated by openthread config stage
add_dependencies(ca821x-openthread-bm-plat openthread-build)

target_link_libraries(ca821x-openthread-bm-plat
	PUBLIC
		cascoda-bm
	PRIVATE
		m
		openthread-plat-api
	)

target_compile_definitions(ca821x-openthread-bm-plat PRIVATE ${OPENTHREAD_CONFIG_DEFINE})

target_include_directories( ca821x-openthread-bm-plat
	PRIVATE
		${openthread_SOURCE_DIR}/src/core
		${openthread_BINARY_DIR}/include
	PUBLIC
		${PROJECT_SOURCE_DIR}/platform
		${openthread_SOURCE_DIR}/include
		${PROJECT_BINARY_DIR}/include
		${PROJECT_SOURCE_DIR}/include
	)

# Add helper interface libraries to simplify the cyclic dependancy between
# the platform layer and the openthread core.
add_library(ca821x-openthread-bm-ftd INTERFACE)
target_link_libraries(ca821x-openthread-bm-ftd
	INTERFACE
		openthread-ftd
		ca821x-openthread-bm-plat
		openthread-ftd
		ca821x-openthread-bm-plat
	)

add_library(ca821x-openthread-bm-mtd INTERFACE)
target_link_libraries(ca821x-openthread-bm-mtd
	INTERFACE
		openthread-mtd
		ca821x-openthread-bm-plat
		openthread-mtd
		ca821x-openthread-bm-plat
	)

# Test app config -------------------------------------------------------------
add_executable(mtdapp
	${PROJECT_SOURCE_DIR}/source/thread_dev_main.c
	${PROJECT_SOURCE_DIR}/source/thread_dev_api.c
	)
target_link_libraries(mtdapp ca821x-openthread-bm-mtd)
target_compile_definitions(mtdapp PRIVATE APP_NAME="OT MTD")
cascoda_make_binary(mtdapp)

if(CASCODA_OPENTHREAD_FTD)
	add_executable(ftdapp
		${PROJECT_SOURCE_DIR}/source/thread_dev_main.c
		${PROJECT_SOURCE_DIR}/source/thread_dev_api.c
		)
	target_include_directories(ftdapp
		PRIVATE ${PROJECT_SOURCE_DIR}/platform
		)
	target_link_libraries(ftdapp ca821x-openthread-bm-ftd)
	target_compile_definitions(ftdapp PRIVATE APP_NAME="OT FTD")
	cascoda_make_binary(ftdapp)

	add_executable(cliapp-bm
		${PROJECT_SOURCE_DIR}/source/thread_bm.c
		${PROJECT_SOURCE_DIR}/source/sensordemo.c
		)
	target_include_directories(cliapp-bm
		PRIVATE ${PROJECT_SOURCE_DIR}/platform
		)
	target_link_libraries(cliapp-bm openthread-cli-ftd ca821x-openthread-bm-ftd)
	target_compile_definitions(cliapp-bm PRIVATE APP_NAME="OT CLIAPP" OT_CLI=1)
	cascoda_make_binary(cliapp-bm)

	add_executable(ncpapp-bm
		${PROJECT_SOURCE_DIR}/source/thread_bm.c
		)
	target_include_directories(ncpapp-bm
		PRIVATE ${PROJECT_SOURCE_DIR}/platform
		)
	target_link_libraries(ncpapp-bm openthread-ncp-ftd ca821x-openthread-bm-ftd)
	target_compile_definitions(ncpapp-bm PRIVATE APP_NAME="OT NCPAPP" OT_NCP=1)
	cascoda_make_binary(ncpapp-bm)
endif()

add_executable(sed-standalone
	${PROJECT_SOURCE_DIR}/source/sed_standalone.c
	)
target_link_libraries(sed-standalone ca821x-openthread-bm-mtd)
cascoda_make_binary(sed-standalone)
