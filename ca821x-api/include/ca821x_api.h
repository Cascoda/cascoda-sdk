/*
 * Copyright (C) 2019  Cascoda, Ltd.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef CA821X_API_H
#define CA821X_API_H

#include <stddef.h>
#include <stdint.h>

#include "ca821x_config.h"
#include "ca821x_endian.h"
#include "ca821x_error.h"
#include "mac_messages.h"

#if CASCODA_CA_VER != 8210 && CASCODA_CA_VER != 8211
#error "UNSUPPORTED CASCODA_CA_VER VERSION (or build incorrectly configured - use cmake)"
#endif

struct ca821x_dev;

/******************************************************************************/
/****** External function pointers                                       ******/
/******************************************************************************/

/******************************************************************************/
/***************************************************************************/ /**
 * \brief Function pointer for downstream api interface.
 *******************************************************************************
 * This function pointer is called by all api functions when it comes to
 * transmitting constructed commands to the transceiver. The user must implement
 * their own downstream exchange function conforming to this prototype and
 * assign that function to this pointer.
 *******************************************************************************
 * \param buf - The buffer containing the command to send downstream
 * \param len - The length of the command in octets
 * \param response - The buffer to populate with a received synchronous
 *                    response
 * \param pDeviceRef - Pointer to initialised ca821x_device_ref struct
 *******************************************************************************
 * \return CA_ERROR_SUCCESS for success, anything else for failure
 ******************************************************************************/
typedef ca_error (*ca821x_api_downstream_t)(const uint8_t *    buf,
                                            size_t             len,
                                            uint8_t *          response,
                                            struct ca821x_dev *pDeviceRef);

/***************************************************************************/ /**
 * \brief API user callbacks structure
 *
 * Contains a set of function pointers that can (and should) be populated by the
 * user for processing asynchronous messages received from the hardware. If the
 * pointer for the specific command type is populated that will be called,
 * otherwise the generic_dispatch function will be. If neither are populated the
 * message is discarded.
 *
 * Every callback should return:
 * - CA_ERROR_NOT_HANDLED if the command was not handled, ie the command was
 *   unexpected/generated by another application etc.
 * - CA_ERROR_SUCCESS if the command was successfully handled by the application.
 * - Another CA_ERROR_ code if encountered.
 ******************************************************************************/
struct ca821x_api_callbacks
{
	MCPS_DATA_indication_callback MCPS_DATA_indication;
	MCPS_DATA_confirm_callback    MCPS_DATA_confirm;
#if CASCODA_CA_VER >= 8211
	PCPS_DATA_indication_callback PCPS_DATA_indication;
	PCPS_DATA_confirm_callback    PCPS_DATA_confirm;
	MLME_POLL_indication_callback MLME_POLL_indication;
#endif
	MLME_ASSOCIATE_indication_callback     MLME_ASSOCIATE_indication;
	MLME_ASSOCIATE_confirm_callback        MLME_ASSOCIATE_confirm;
	MLME_DISASSOCIATE_indication_callback  MLME_DISASSOCIATE_indication;
	MLME_DISASSOCIATE_confirm_callback     MLME_DISASSOCIATE_confirm;
	MLME_BEACON_NOTIFY_indication_callback MLME_BEACON_NOTIFY_indication;
	MLME_ORPHAN_indication_callback        MLME_ORPHAN_indication;
	MLME_SCAN_confirm_callback             MLME_SCAN_confirm;
	MLME_COMM_STATUS_indication_callback   MLME_COMM_STATUS_indication;
	MLME_SYNC_LOSS_indication_callback     MLME_SYNC_LOSS_indication;
	HWME_WAKEUP_indication_callback        HWME_WAKEUP_indication;
	TDME_RXPKT_indication_callback         TDME_RXPKT_indication;
	TDME_EDDET_indication_callback         TDME_EDDET_indication;
	TDME_ERROR_indication_callback         TDME_ERROR_indication;
	ca_error (*generic_dispatch)(const uint8_t *buf, size_t len, struct ca821x_dev *pDeviceRef);
};

/******************************************************************************/
/****** device_ref struct for all internal state                         ******/
/******************************************************************************/
struct ca821x_dev
{
	void *context;          //< Context for free use by the application
	void *exchange_context; //< Context for free use by the exchange

	/** Set by the exchange for the api to use to send messages to CA821x */
	ca821x_api_downstream_t ca821x_api_downstream;

	/** Callback routines registered by the user, to be called by the api for upstream commands */
	struct ca821x_api_callbacks callbacks;

#if CASCODA_CA_VER == 8210
	uint8_t  extaddr[8]; /**< Mirrors nsIEEEAddress in the PIB */
	uint16_t shortaddr;  /**< Mirrors macShortAddress in the PIB */
	uint8_t  lqi_mode;   /**< Mirrors lqi_mode on the CA8210 */
#endif

	//MAC Workarounds for V1.1 and MPW silicon (V0.x)
	uint8_t MAC_MPW; /**< Flag to enable workarounds for ca8210 v0.x */
};

/******************************************************************************/
/****** MAC MCPS/MLME Downlink                                           ******/
/******************************************************************************/

ca_mac_status MCPS_DATA_request(uint8_t            SrcAddrMode,
                                struct FullAddr    DstAddr,
                                uint8_t            MsduLength,
                                uint8_t *          pMsdu,
                                uint8_t            MsduHandle,
                                uint8_t            TxOptions,
                                struct SecSpec *   pSecurity,
                                struct ca821x_dev *pDeviceRef);

ca_mac_status MCPS_PURGE_request_sync(uint8_t *MsduHandle, struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_ASSOCIATE_request(uint8_t            LogicalChannel,
                                     struct FullAddr    DstAddr,
                                     uint8_t            CapabilityInfo,
                                     struct SecSpec *   pSecurity,
                                     struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_ASSOCIATE_response(uint8_t *          pDeviceAddress,
                                      uint16_t           AssocShortAddress,
                                      uint8_t            Status,
                                      struct SecSpec *   pSecurity,
                                      struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_DISASSOCIATE_request(struct FullAddr    DevAddr,
                                        uint8_t            DisassociateReason,
                                        uint8_t            TxIndirect,
                                        struct SecSpec *   pSecurity,
                                        struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_GET_request_sync(uint8_t            PIBAttribute,
                                    uint8_t            PIBAttributeIndex,
                                    uint8_t *          pPIBAttributeLength,
                                    void *             pPIBAttributeValue,
                                    struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_ORPHAN_response(uint8_t *          pOrphanAddress,
                                   uint16_t           ShortAddress,
                                   uint8_t            AssociatedMember,
                                   struct SecSpec *   pSecurity,
                                   struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_RESET_request_sync(uint8_t SetDefaultPIB, struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_RX_ENABLE_request_sync(uint8_t            DeferPermit,
                                          uint32_t           RxOnTime,
                                          uint32_t           RxOnDuration,
                                          struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_SCAN_request(uint8_t            ScanType,
                                uint32_t           ScanChannels,
                                uint8_t            ScanDuration,
                                struct SecSpec *   pSecurity,
                                struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_SET_request_sync(uint8_t            PIBAttribute,
                                    uint8_t            PIBAttributeIndex,
                                    uint8_t            PIBAttributeLength,
                                    const void *       pPIBAttributeValue,
                                    struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_START_request_sync(uint16_t           PANId,
                                      uint8_t            LogicalChannel,
                                      uint8_t            BeaconOrder,
                                      uint8_t            SuperframeOrder,
                                      uint8_t            PANCoordinator,
                                      uint8_t            BatteryLifeExtension,
                                      uint8_t            CoordRealignment,
                                      struct SecSpec *   pCoordRealignSecurity,
                                      struct SecSpec *   pBeaconSecurity,
                                      struct ca821x_dev *pDeviceRef);

ca_mac_status MLME_POLL_request_sync(struct FullAddr CoordAddress,
#if CASCODA_CA_VER == 8210
                                     uint8_t Interval[2], /* polling interval in 0.1 seconds res */
                                                          /* 0 means poll once */
                                                          /* 0xFFFF means stop polling */
#endif
                                     struct SecSpec *   pSecurity,
                                     struct ca821x_dev *pDeviceRef);

/******************************************************************************/
/****** HWME Downlink                                                    ******/
/******************************************************************************/

ca_mac_status HWME_SET_request_sync(uint8_t            HWAttribute,
                                    uint8_t            HWAttributeLength,
                                    uint8_t *          pHWAttributeValue,
                                    struct ca821x_dev *pDeviceRef);

ca_mac_status HWME_GET_request_sync(uint8_t            HWAttribute,
                                    uint8_t *          HWAttributeLength,
                                    uint8_t *          pHWAttributeValue,
                                    struct ca821x_dev *pDeviceRef);

ca_mac_status HWME_HAES_request_sync(uint8_t HAESMode, uint8_t *pHAESData, struct ca821x_dev *pDeviceRef);

/******************************************************************************/
/****** TDME Downlink                                                    ******/
/******************************************************************************/

ca_mac_status TDME_SETSFR_request_sync(uint8_t            SFRPage,
                                       uint8_t            SFRAddress,
                                       uint8_t            SFRValue,
                                       struct ca821x_dev *pDeviceRef);

ca_mac_status TDME_GETSFR_request_sync(uint8_t            SFRPage,
                                       uint8_t            SFRAddress,
                                       uint8_t *          SFRValue,
                                       struct ca821x_dev *pDeviceRef);

ca_mac_status TDME_TESTMODE_request_sync(uint8_t TestMode, struct ca821x_dev *pDeviceRef);

ca_mac_status TDME_SET_request_sync(uint8_t            TestAttribute,
                                    uint8_t            TestAttributeLength,
                                    void *             pTestAttributeValue,
                                    struct ca821x_dev *pDeviceRef);

ca_mac_status TDME_TXPKT_request_sync(uint8_t            TestPacketDataType,
                                      uint8_t *          TestPacketSequenceNumber,
                                      uint8_t *          TestPacketLength,
                                      void *             pTestPacketData,
                                      struct ca821x_dev *pDeviceRef);

ca_mac_status TDME_LOTLK_request_sync(uint8_t *          TestChannel,
                                      uint8_t *          TestRxTxb,
                                      uint8_t *          TestLOFDACValue,
                                      uint8_t *          TestLOAMPValue,
                                      uint8_t *          TestLOTXCALValue,
                                      struct ca821x_dev *pDeviceRef);

/******************************************************************************/
/****** TDME Register Default Initialisation and Checking Functions      ******/
/******************************************************************************/
ca_mac_status TDME_ChipInit(struct ca821x_dev *pDeviceRef);
ca_mac_status TDME_ChannelInit(uint8_t channel, struct ca821x_dev *pDeviceRef);
ca_mac_status TDME_CheckPIBAttribute(uint8_t PIBAttribute, uint8_t PIBAttributeLength, const void *pPIBAttributeValue);

ca_mac_status TDME_SetTxPower(uint8_t txp, struct ca821x_dev *pDeviceRef);
ca_mac_status TDME_GetTxPower(uint8_t *txp, struct ca821x_dev *pDeviceRef);

/******************************************************************************/
/****** API meta functions                                           ******/
/******************************************************************************/

/******************************************************************************/
/***************************************************************************/ /**
 * \brief Initialisation function for initialising a ca821x_dev data structure
 *        for use with the API.
 *******************************************************************************
 * This function should be called to initialise a pDeviceRef. This should be
 * done prior to any other use of the structure.
 *******************************************************************************
 * \param pDeviceRef - Pointer to ca821x_device_ref struct to be initialised.
 *******************************************************************************
 * \return CA_ERROR_SUCCESS: Structure successfully initialised
 * \return CA_ERROR_INVALID_ARGS: Structure initialisation failed (pDeviceRef cannot be NULL)
 ******************************************************************************/
ca_error ca821x_api_init(struct ca821x_dev *pDeviceRef);

/******************************************************************************/
/***************************************************************************/ /**
 * \brief Function to get a reference to the callback for a certain command ID
 *******************************************************************************
 * This is mainly used internally, and is probably not useful for most user
 * applications.
 *******************************************************************************
 * \param cmdid - The command ID of the desired callback
 * \param pDeviceRef - Pointer to initialised ca821x_device_ref struct
 * \retval  A reference to the relevant callback, or NULL if the cmdid is not recognised
 ******************************************************************************/
union ca821x_api_callback *ca821x_get_callback(uint8_t cmdid, struct ca821x_dev *pDeviceRef);

/******************************************************************************/
/***************************************************************************/ /**
 * \brief Function to get the command ID for the synchronous response to a sync
 * command.
 *******************************************************************************
 * This is mainly used internally, and is probably not useful for most user
 * applications.
 *******************************************************************************
 * \param cmdid - The command ID of the synchronous request
 * \retval  The command ID of the associated response, or 0 for failure
 ******************************************************************************/
uint8_t ca821x_get_sync_response_id(uint8_t cmdid);

/***************************************************************************/ /**
 * \brief Function to get the version string
 *******************************************************************************
 * This includes the git version, and build date of the sdk.
 * Example: "v0.1-43-g0f4564d-dirty Feb 27 2019"
 * representing 43 commits past version v0.1, with git hash 0f4564d, but dirty
 * (with changes). Built on Feb 27th 2019.
 *******************************************************************************
 * \retval  A pointer to the version string
 ******************************************************************************/
const char *ca821x_get_version(void);

/******************************************************************************/
/***************************************************************************/ /**
 * \brief Function called by the exchange to dispatch indications from the ca821x
 *******************************************************************************
 * FOR USE IN THE EXCHANGE ONLY. If the application needs to process incoming
 * indications, this should be by connecting callbacks using
 * ca821x_register_callbacks and a ca821x_api_callbacks struct.
 *******************************************************************************
 * \param buf - entire buffer of message, including command and length bytes
 * \param len - length of buffer
 * \param pDeviceRef - Pointer to initialised ca821x_device_ref struct
 * \reval CA_ERROR_SUCCESS for success, CA_ERROR_NOT_HANDLED if not handled, or another CA_ERROR
 ******************************************************************************/
ca_error ca821x_downstream_dispatch(uint8_t *buf, size_t len, struct ca821x_dev *pDeviceRef);

#endif // CA821X_API_H
